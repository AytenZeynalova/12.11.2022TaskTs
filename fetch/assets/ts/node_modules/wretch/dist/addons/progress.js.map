{"version":3,"file":"progress.js","sourceRoot":"","sources":["../../src/addons/progress.ts"],"names":[],"mappings":"AA4BA;;;;;;;;;;;;;;;GAeG;AACH,MAAM,QAAQ,GAAiD,GAAG,EAAE;IAClE,MAAM,EAAE,GAAG;QACT,GAAG,EAAE,IAAI;KACV,CAAA;IAED,MAAM,mBAAmB,GAAyB,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACtE,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACrC,IAAI;gBACF,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;gBAC5D,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAA;gBAC7C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC;oBACpC,SAAS,CAAC,KAAK,EAAE,UAAU;wBACzB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAA;wBACtB,IAAI,KAAK,GAAG,MAAM,EAAE;4BAClB,KAAK,GAAG,MAAM,CAAA;yBACf;wBACD,IAAI,EAAE,CAAC,GAAG,EAAE;4BACV,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;yBACtB;wBACD,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;oBAC3B,CAAC;iBACF,CAAC,CAAA;gBACF,OAAO,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,CAAA;aACpE;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,QAAQ,CAAA;aAChB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA;IAED,OAAO;QACL,aAAa,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;QACtD,CAAC;QACD,QAAQ,EAAE;YACR,QAAQ,CAAC,UAAmD;gBAC1D,EAAE,CAAC,GAAG,GAAG,UAAU,CAAA;gBACnB,OAAO,IAAI,CAAA;YACb,CAAC;SACF;KACF,CAAA;AACH,CAAC,CAAA;AAED,eAAe,QAAQ,CAAA","sourcesContent":["import type { ConfiguredMiddleware, WretchAddon, WretchResponseChain } from \"../types.js\"\n\nexport interface ProgressResolver {\n  /**\n   * Provides a way to register a callback to be invoked one or multiple times during the download.\n   * The callback receives the current progress as two arguments, the number of bytes loaded and the total number of bytes to load.\n   *\n   * _Under the hood: this method adds a middleware to the chain that will intercept the response and replace the body with a new one that will emit the progress event._\n   *\n   * ```js\n   * import ProgressAddon from \"wretch/addons/progress\"\n   *\n   * wretch(\"some_url\")\n   *   // Register the addon\n   *   .addon(ProgressAddon())\n   *   .get()\n   *   // Log the progress as a percentage of completion\n   *   .progress((loaded, total) => console.log(`${(loaded / total * 100).toFixed(0)}%`))\n   * ```\n   *\n   * @param onProgress - A callback that will be called one or multiple times with the number of bytes loaded and the total number of bytes to load.\n   */\n  progress: <T, C extends ProgressResolver, R>(\n    this: C & WretchResponseChain<T, C, R>,\n    onProgress: (loaded: number, total: number) => void\n  ) => this\n}\n\n/**\n * Adds the ability to monitor progress when downloading a response.\n *\n * _Compatible with all platforms implementing the [TransformStream WebAPI](https://developer.mozilla.org/en-US/docs/Web/API/TransformStream#browser_compatibility)._\n *\n * ```js\n * import ProgressAddon from \"wretch/addons/progress\"\n *\n * wretch(\"some_url\")\n *   // Register the addon\n *   .addon(ProgressAddon())\n *   .get()\n *   // Log the progress as a percentage of completion\n *   .progress((loaded, total) => console.log(`${(loaded / total * 100).toFixed(0)}%`))\n * ```\n */\nconst progress: () => WretchAddon<unknown, ProgressResolver> = () => {\n  const cb = {\n    ref: null\n  }\n\n  const transformMiddleware: ConfiguredMiddleware = next => (url, opts) => {\n    let loaded = 0\n    let total = 0\n    return next(url, opts).then(response => {\n      try {\n        const contentLength = response.headers.get(\"content-length\")\n        total = contentLength ? +contentLength : null\n        const transform = new TransformStream({\n          transform(chunk, controller) {\n            loaded += chunk.length\n            if (total < loaded) {\n              total = loaded\n            }\n            if (cb.ref) {\n              cb.ref(loaded, total)\n            }\n            controller.enqueue(chunk)\n          }\n        })\n        return new Response(response.body.pipeThrough(transform), response)\n      } catch (e) {\n        return response\n      }\n    })\n  }\n\n  return {\n    beforeRequest(wretch) {\n      return wretch._middlewares.push(transformMiddleware)\n    },\n    resolver: {\n      progress(onProgress: (loaded: number, total: number) => void) {\n        cb.ref = onProgress\n        return this\n      }\n    },\n  }\n}\n\nexport default progress\n"]}